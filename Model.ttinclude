<#@ include file="Manager.ttinclude" #>
<# var manager=new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile) +  @"\Model\"};
    foreach(Table tbl in from t in tables where !t.Ignore select t)
{ 
manager.StartBlock(tbl.ClassName+".cs");

#>
using System;
using PetaPoco;

namespace <#=Namespace #>
{
   [Serializable]
   [TableName("<#=tbl.Name#>")]
   [PrimaryKey("<#=tbl.PK.Name#>", AutoIncrement=false)]
   public partial class <#=tbl.ClassName#>
   {
   <#
   foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
   {
   #>
      /// <summary>
      /// <#=col.Remark.Replace("\r\n"," ")#>
      /// </summary>
      public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
   <# 
   }
   #>
   }
}
<#manager.EndBlock();#>

<# 
   manager.StartBlock("I"+tbl.ClassName+"Repository.cs");
#>
using System;
using <#=Namespace #>;
using XmSoft.NetCore.DBContext;

namespace <#=InterfaceName #>.Repository
{
   public interface  I<#=tbl.ClassName#>Repository :IDefaultRepository<<#=tbl.ClassName#>>
   {
      
   }
}
<#manager.EndBlock();#>

<# 
	manager.StartBlock(tbl.ClassName+"Repository.cs");
#>
using System;
using <#=Namespace #>;
using XmSoft.NetCore.DBContext;
using <#=InterfaceName #>.Repository;

namespace <#=RepositoryName #>
{
   public partial class <#=tbl.ClassName#>Repository :DefaultRepository<<#=tbl.ClassName#>>,I<#=tbl.ClassName#>Repository
   {
      public <#=tbl.ClassName#>Repository(DbContext Context) : base(Context)
     {

     }
   }
}
<#manager.EndBlock();#>


<# 
	manager.StartBlock("I"+tbl.ClassName+"Service.cs");
#>
using System;
using <#=Namespace #>;

namespace <#=InterfaceName #>.Service
{
   public interface I<#=tbl.ClassName#>Service
   {
      
      object Create(<#=tbl.ClassName#> model);
     
      bool Update(<#=tbl.ClassName#> model);

      bool Delete(object Id);

   }
}
<#manager.EndBlock();#>


<# 
	manager.StartBlock(tbl.ClassName+"Service.cs");
#>
using System;
using <#=Namespace #>;
using <#=RepositoryName #>;
using <#=InterfaceName #>.Service;
using <#=InterfaceName #>.Repository;

namespace <#=ServiceName #>
{
   public class <#=tbl.ClassName#>Service :I<#=tbl.ClassName#>Service
   {
      private I<#=tbl.ClassName#>Repository repository;
      public <#=tbl.ClassName#>Service(I<#=tbl.ClassName#>Repository _repository)
      {
         repository = _repository;
      }  

      /// <summary>
      /// 新增
      /// </summary>
      public object Create(<#=tbl.ClassName#> model) => repository.Create(model); 
      /// <summary>
      /// 修改
      /// </summary>
      public bool Update(<#=tbl.ClassName#> model) => repository.Update(model);
      /// <summary>
      /// 删除
      /// </summary>
      public bool Delete(object Id) => repository.DeleteById(Id);

   }
}
<#manager.EndBlock();#>

<# } #>
<#manager.Process(true); #>